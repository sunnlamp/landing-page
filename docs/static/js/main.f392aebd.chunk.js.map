{"version":3,"sources":["images/rogelio.jpg","Nav.js","Main.js","About.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Nav","react_default","a","createElement","className","href","target","rel","aria-hidden","Component","Main","About","App","BrowserRouter","Nav_Nav","src_Main","src_About","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qKCGnBC,mLAEjB,OACEC,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,IACNJ,EAAAC,EAAAC,cAAA,uBAGJF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,IACNJ,EAAAC,EAAAC,cAAA,2BAGJF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGG,OAAO,SAASC,IAAI,sBAAsBF,KAAK,+BAChDJ,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAgBI,cAAY,WAI7CP,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGG,OAAO,SAASC,IAAI,sBAAsBF,KAAK,+BAChDJ,EAAAC,EAAAC,cAAA,KAAGC,UAAU,qBAAqBI,cAAY,oBAvB3BC,aCSlBC,SATF,kBACXT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BAEfH,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,gECaWQ,EAnBD,kBACZV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,0DACAF,EAAAC,EAAAC,cAAA,iOAKAF,EAAAC,EAAAC,cAAA,wKAIAF,EAAAC,EAAAC,cAAA,mLCGWS,EAZH,kBACVX,EAAAC,EAAAC,cAACU,EAAA,EAAD,KACEZ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACW,EAAD,MACAb,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACY,EAAD,MACAd,EAAAC,EAAAC,cAACa,EAAD,UCAYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f392aebd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rogelio.d87e45e1.jpg\";","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\n\nexport default class Nav extends Component {\n  render() {\n    return (\n      <header>\n        <nav className=\"navbar\">\n          <li>\n            <a href=\"\">\n              <span>About</span>\n            </a>\n          </li>\n          <li>\n            <a href=\"\">\n              <span>Portfolio</span>\n            </a>\n          </li>\n          <li>\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/sunnlamp\">\n              <i className=\"fab fa-github\" aria-hidden=\"true\">\n              </i>\n            </a>\n          </li>\n          <li>\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/sunnlamp\">\n              <i className=\"fab fa-linkedin-in\" aria-hidden=\"true\">\n              </i>\n            </a>\n          </li>\n        </nav>\n      </header>  \n    )\n  }\n}\n","import React from 'react'\nimport Rogelio from './images/rogelio.jpg'\n\nconst Main = () => (\n  <div className=\"main-landing container\">\n    <div className=\"main-landing-background\">\n    </div>\n    <h1>Hi, I'm Rogelio.</h1>\n    <h3>Web Developer | Northwestern Coding Bootcamp TA</h3>\n  </div>\n)\n\nexport default Main\n","import React from 'react'\n\nconst About = () => (\n  <div className=\"about container\">\n    <h2>About</h2>\n    <p>I enjoy JavaScript, Ruby, and all things web.</p>\n    <p>Recently I've been a teaching assistant at Northwestern \n      University's Coding Bootcamp. I've been working in a small \n      team, getting a group of developers ready to get out into \n      the world and build some awesome stuff!\n    </p>\n    <p>I have also had a lifelong passion for music and play a \n      couple of stringed instruments. I've been in bands most of \n      my life and still love doing it for fun.\n    </p>\n    <p>React, Node.js, Ruby on Rails are the main tricks of my trade.\n      However, I enjoy learning new technology and have been keeping \n      myself busy, on the side, learning Go.</p>\n  </div>\n)\n\nexport default About\n","import React from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport Nav from './Nav'\nimport Main from './Main'\nimport About from './About'\n\nconst App = () => (\n  <Router>\n    <div>\n      <Nav />\n      <div>\n        <Main />\n        <About />\n      </div>\n    </div>\n  </Router>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}